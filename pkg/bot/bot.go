// TradeTGBot/pkg/bot/bot.go
package bot

import (
	"TradeTGBot/pkg/stocks"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/gocolly/colly" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º colly, —Ç–∞–∫ –∫–∞–∫ InitCollector –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç *colly.Collector
)

// Alert - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏).
// –í –±—É–¥—É—â–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ –≤ –ë–î, –∏ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å repository.Alert
type Alert struct {
	Ticker    string
	Target    float64
	ChatID    int64
	Direction string
}

// bot.go –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∞–ª–µ—Ä—Ç–æ–≤,
// –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤ –ë–î, —Ç–æ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É–±—Ä–∞—Ç—å.
var userAlerts []Alert // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å repository.Alert

// BotService –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
type BotService struct {
	bot       *tgbotapi.BotAPI
	collector *colly.Collector // –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
}

// NewBotService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotService.
func NewBotService(token string, collector *colly.Collector) (*BotService, error) {
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram API: %w", err)
	}
	botAPI.Debug = false // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å false –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –±–æ—Ç %s", botAPI.Self.UserName)

	return &BotService{
		bot:       botAPI,
		collector: collector,
	}, nil
}

// StartPolling –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram API –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
func (bs *BotService) StartPolling() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bs.bot.GetUpdatesChan(u)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
	go bs.checkUserAlerts()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram API
	for update := range updates {
		if update.Message == nil {
			continue
		}
		bs.handleMessage(update.Message)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (bs *BotService) handleMessage(message *tgbotapi.Message) {
	if message.IsCommand() {
		bs.handleCommand(message)
	} else {
		bs.handleText(message)
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
func (bs *BotService) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, LKOH –∏–ª–∏ AEROFLOT) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã.\n"+
				"–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–ò–ö–ï–† –¶–ï–ù–ê\n"+
				"–ù–∞–ø—Ä–∏–º–µ—Ä: LKOH 7100.0\n"+
				"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /list")
		bs.bot.Send(msg)
	case "list":
		var sb strings.Builder
		sb.WriteString("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n")
		for _, info := range stocks.Stocks {
			sb.WriteString(fmt.Sprintf("<b>%s</b> ‚Äì %s\n", info.Ticker, info.Name))
		}
		msg := tgbotapi.NewMessage(message.Chat.ID, sb.String())
		msg.ParseMode = "HTML"
		bs.bot.Send(msg)
	default:
		bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."))
	}
}

// handleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å—ã —Ü–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤).
func (bs *BotService) handleText(message *tgbotapi.Message) {
	tokens := strings.Fields(message.Text)

	if len(tokens) == 2 { // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–¢–ò–ö–ï–† –¶–ï–ù–ê)
		ticker := strings.ToUpper(tokens[0])
		target, err := strconv.ParseFloat(tokens[1], 64)
		if err != nil {
			bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
			return
		}
		info, ok := stocks.Stocks[ticker]
		if !ok {
			bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–¢–∏–∫–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", ticker)))
			return
		}
		stock, err := stocks.FetchStockData(info.URL, bs.collector) // –ò—Å–ø–æ–ª—å–∑—É–µ–º collector –∏–∑ BotService
		if err != nil {
			bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %s: %v", ticker, err)))
			return
		}
		var direction string
		if stock.Price < target {
			direction = "up"
		} else if stock.Price > target {
			direction = "down"
		} else {
			bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("%s —É–∂–µ –∏–º–µ–µ—Ç —Ü–µ–Ω—É %.2f", stock.Name, stock.Price)))
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
		userAlerts = append(userAlerts, Alert{
			Ticker:    ticker,
			Target:    target,
			ChatID:    message.Chat.ID,
			Direction: direction,
		})
		// –ï—Å–ª–∏ –±—ã –∞–ª–µ—Ä—Ç—ã –±—ã–ª–∏ –≤ –ë–î, —Ç—É—Ç –º—ã –±—ã –≤—ã–∑—ã–≤–∞–ª–∏ repository.SaveAlert
		// err = repository.SaveAlert(repository.Alert{Ticker: ticker, Target: target, ChatID: message.Chat.ID, Direction: direction})
		// if err != nil {
		//    log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î: %v", err)
		//    bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."))
		//    return
		// }

		msgText := fmt.Sprintf("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è %s: –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç %.2f, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", stock.Name, target)
		bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, msgText))
		return
	}

	if len(tokens) == 1 { // –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –ø–æ —Ç–∏–∫–µ—Ä—É
		ticker := strings.ToUpper(strings.TrimSpace(message.Text))
		info, ok := stocks.Stocks[ticker]
		if !ok {
			bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–¢–∏–∫–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", ticker)))
			return
		}

		stock, err := stocks.FetchStockData(info.URL, bs.collector) // –ò—Å–ø–æ–ª—å–∑—É–µ–º collector –∏–∑ BotService
		if err != nil {
			bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %s: %v", ticker, err)))
			return
		}

		response := fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %.2f", stock.Name, stock.Price)
		bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, response))
		return
	}

	bs.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–∏–∫–µ—Ä –∏–ª–∏ '–¢–ò–ö–ï–† –¶–ï–ù–ê'."))
}

// checkUserAlerts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
func (bs *BotService) checkUserAlerts() {
	for {
		// –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î, –º—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ –∏—Ö –∑–¥–µ—Å—å —á–µ—Ä–µ–∑ repository.GetActiveAlerts()
		// alertsFromDB, err := repository.GetActiveAlerts()
		// if err != nil {
		//    log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î: %v", err)
		//    time.Sleep(30 * time.Second) // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
		//    continue
		// }
		// for _, alert := range alertsFromDB { ... }

		var remaining []Alert
		for _, alert := range userAlerts { // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
			stockInfo, ok := stocks.Stocks[alert.Ticker]
			if !ok {
				continue
			}
			stock, err := stocks.FetchStockData(stockInfo.URL, bs.collector) // –ò—Å–ø–æ–ª—å–∑—É–µ–º collector –∏–∑ BotService
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è %s: %v", alert.Ticker, err)
				remaining = append(remaining, alert)
				continue
			}
			trigger := false
			if alert.Direction == "up" && stock.Price >= alert.Target {
				trigger = true
			} else if alert.Direction == "down" && stock.Price <= alert.Target {
				trigger = true
			}
			if trigger {
				msgText := fmt.Sprintf("üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –¥–ª—è %s: —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ %.2f (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %.2f)", stock.Name, alert.Target, stock.Price)
				bs.bot.Send(tgbotapi.NewMessage(alert.ChatID, msgText))
				// –ï—Å–ª–∏ –±—ã –∞–ª–µ—Ä—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î, –º—ã –±—ã —É–¥–∞–ª—è–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–π –∞–ª–µ—Ä—Ç –∏–∑ –ë–î —á–µ—Ä–µ–∑ repository.DeleteAlert
				// err = repository.DeleteAlert(repository.Alert{ID: alert.ID}) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ Alert –∏–º–µ–µ—Ç ID
				// if err != nil {
				//    log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –∏–∑ –ë–î: %v", err)
				// }
			} else {
				remaining = append(remaining, alert)
			}
		}
		userAlerts = remaining // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
		time.Sleep(30 * time.Second)
	}
}
