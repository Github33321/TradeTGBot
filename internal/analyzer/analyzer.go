// TradeTGBot/internal/analyzer/analyzer.go
package analyzer

import (
	"TradeTGBot/internal/repository"
	"TradeTGBot/pkg/stocks"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/gocolly/colly" // <-- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢!
)

// PriceAnalyzer –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
type PriceAnalyzer struct {
	Bot            *tgbotapi.BotAPI
	Collector      *colly.Collector // <-- –ò–ó–ú–ï–ù–ï–ù–û –ù–ê *colly.Collector
	TargetChatID   int64
	Interval       time.Duration
	Threshold      float64 // –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	AveragePeriod  time.Duration
	lastAlertPrice float64 // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
	alertThreshold float64 // –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
}

// NewPriceAnalyzer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PriceAnalyzer.
func NewPriceAnalyzer(bot *tgbotapi.BotAPI, collector *colly.Collector, targetChatID int64, interval, averagePeriod time.Duration, threshold float64) *PriceAnalyzer { // <-- –ò–ó–ú–ï–ù–ï–ù–û –ù–ê *colly.Collector
	return &PriceAnalyzer{
		Bot:            bot,
		Collector:      collector,
		TargetChatID:   targetChatID,
		Interval:       interval,
		Threshold:      threshold,
		AveragePeriod:  averagePeriod,
		lastAlertPrice: 0.0,
		alertThreshold: 0.1, // 0.1% –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	}
}

// StartAnalysis –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω.
func (pa *PriceAnalyzer) StartAnalysis() {
	go pa.analyzeLoop()
}

func (pa *PriceAnalyzer) analyzeLoop() {
	ticker := "LKOH" // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ LKOH
	info, ok := stocks.Stocks[ticker]
	if !ok {
		log.Printf("–û—à–∏–±–∫–∞: –¢–∏–∫–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π. –ê–Ω–∞–ª–∏–∑ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.", ticker)
		return
	}

	for {
		// 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É LKOH
		stock, err := stocks.FetchStockData(info.URL, pa.Collector)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LKOH: %v", err)
			time.Sleep(pa.Interval)
			continue
		}
		currentPrice := stock.Price
		log.Printf("LKOH: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f", currentPrice)

		// 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –ë–î —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
		err = repository.SaveStockPrice(ticker, currentPrice)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã LKOH –≤ –ë–î: %v", err)
		}

		// 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
		avgPrice, err := repository.GetAveragePrice(ticker, pa.AveragePeriod)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã LKOH –∑–∞ %s: %v", pa.AveragePeriod, err)
			time.Sleep(pa.Interval)
			continue
		}
		log.Printf("LKOH: –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ %s: %.2f", pa.AveragePeriod, avgPrice)

		// 4. –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
		if avgPrice > 0 { // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
			percentageChange := ((currentPrice - avgPrice) / avgPrice) * 100
			log.Printf("LKOH: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –∑–∞ %s: %.2f%%", pa.AveragePeriod, percentageChange)

			// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			if percentageChange >= pa.Threshold || percentageChange <= -pa.Threshold {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
				if pa.lastAlertPrice == 0.0 || (currentPrice/pa.lastAlertPrice < (1 - pa.alertThreshold)) || (currentPrice/pa.lastAlertPrice > (1 + pa.alertThreshold)) {
					msgText := fmt.Sprintf("üö® **–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã LKOH!**\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f\n–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ %s: %.2f\n–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %.2f%%",
						currentPrice, pa.AveragePeriod, avgPrice, percentageChange)

					if pa.TargetChatID != 0 {
						_, err := pa.Bot.Send(tgbotapi.NewMessage(pa.TargetChatID, msgText))
						if err != nil {
							log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ LKOH: %v", err)
						} else {
							log.Println("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ LKOH –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
							pa.lastAlertPrice = currentPrice // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
						}
					}
				}
			} else {
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastAlertPrice, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –Ω–æ—Ä–º—É
				pa.lastAlertPrice = 0.0
			}
		}

		time.Sleep(pa.Interval) // –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
	}
}
